{"./":{"url":"./","title":"PointStone388介绍","keywords":"","body":"PointStone388介绍 这里是 PointStone388 计划，也就是点石的培养计划。 希望通过这个培养的你能够对计算机和开发有一定的了解，欢迎加入点石团队。 欢迎star，github项目地址: https://github.com/PointStoneTeam/PointStone388 如果错误，欢迎在项目中提出修改的issue的建议: https://github.com/PointStoneTeam/PointStone388/issues 如果错误，请使用 Pull Request 的方式进行提交修改 团队Logo "},"First-To-Read/First-To-Read.html":{"url":"First-To-Read/First-To-Read.html","title":"入门必学工具","keywords":"","body":"入门必学工具 这里会给大家介绍几个入门必学的工具，较为简单和基础。 Markdown Git "},"First-To-Read/Markdown.html":{"url":"First-To-Read/Markdown.html","title":"Markdown","keywords":"","body":"Markdown 第一课当然是比较简单的，让大家了解一下 Markdown 这种语法。这是一种非常方便而且应用广泛的一种输入方式希望大家能够将该语法作为自己输入和记录的常用方法，自己做记录的时候尽量不要使用 Word 工具 PC 端各个系统强烈推荐 Visual Studio Code（简称 VS Code），点击 download 即可下载新建后缀为.md文件之后即可开始编写，右上角选择打开侧边预览即可看到效果 --> 教程 可以看一下 Markdown常用语法 要求 使用1小时的时间，了解常见的 Markdown 编辑方法，然后以后再使用的过程中慢慢熟悉以下较为重要的Markdown语法： 各级标题的输入 如何使用引用 如何对关键字进行加粗 如何引用图片和链接 如何编辑代码块 如何编辑简单表格(复杂表格使用 Markdown 并不友好) 如何编辑列表 "},"First-To-Read/Git.html":{"url":"First-To-Read/Git.html","title":"Git","keywords":"","body":"Git Git 是你之后也会经常用到的一个工具 教程 下面推荐几个教程： Git 官方教程 Pro Git 流传甚广的廖雪峰老师写的 Git 教程 如果觉得该教程内容繁多可以先看一下 git - 简明指南 还有一个通过类似游戏闯关的方式来学习Git的工具 learnGitBranching 工具 推荐使用 Git bash，也就是 Git 的命令行版本，如果刚入门觉得命令行没有图形界面方便，也请大家坚持使用命令行版本！不要使用有图形界面的工具 要求 大家可以先完成前 8 个要求 能够在 github 创建一个自己的项目 能够使用 git 将项目使用 ssh 的方式克隆下来 能够自己修改之后推送到远端 能够从远端拉取更新 能够自己进行版本回退 能够查看当前的项目的分支 能够自己切换并且按照不同分支进行推送 能够进行简单的分支合并 能够了解 remote 的基本运作方式 能够对于不同的 remote 进行推送 能够使用 Pull Request 对于仓库发起合并请求 参考答案 创建一个项目： 注册账号 添加SSH 点击new repository新建项目 克隆到本地： git clone git@github.com:(我的用户名)/（远程库名）.git 修改后推送到远端： git remote -v git push origin master 从远端拉取更新： git remote -v git fetch origin master git push 版本回退： git reset --hard HEAD^(回退到上一版本) 查看当前分支： git branch 切换分支： git checkout 分支 按照不同分支推送： git push origin 分支 分支合并： git merge 分支1（把分支1合并到当前分支） "},"Basic/":{"url":"Basic/","title":"点石编程入门指南：基础篇","keywords":"","body":"点石编程入门指南：基础篇 2015 年的秋天，我来到地大，就读于资源学院的 海洋地质与资源 专业。和所有智力平凡的人一样，我想要努力学习取得好成绩保研走上人生巅峰的梦想，很快被填鸭背诵式的课程和一群无比会学习的妹子摧毁了。 但是我很快发现了新的适合我学习的东西——写代码。。那是2015年的冬天，当我还在困惑为什么测量学老师会只给我的报告 70 分的时候，我在知乎上刷到了一篇文章： 编程入门指南 。我开始从 Python 入手学习编程。 虽然时至今日，我可能只完成了这个指南里大概一半多一点的内容，但这篇指南中的内容依然帮助我从一个0基础的菜鸡成为了一个有一点基础、能混口饭吃的菜鸡。强烈建议你认真阅读这篇文章并思考一下，自己该如何学习编程，乃至是学习计算机科学。事实上，计算机编程能力本身是一个与你的学历、背景并没有太多联系的技能，很大程度上完全靠你的自学。作者萧井陌本人也仅仅是一个二本物理系毕业的本科生。在实际工作中，我遇到的大佬们的背景从三本到清北复交都有，这在其它领域简直是不可想像的。 当然了，学历还是很重要的，一些计算机科学的方向，如机器学习、密码学等，没有足够好的学科基础和背景是很难很难上道的。但也希望同学们不要因为自己的学历和背景而妄自菲薄。 对于点石的新人同学们，要求完成 MIT 6.0001 和 Harvard CS50 两门课程。建议完成课后习题，但不强制；要求最终完成两个大项目作为考核。具体请看子wiki "},"Basic/MIT-60001.html":{"url":"Basic/MIT-60001.html","title":"从 Python 开始： MIT 6.0001","keywords":"","body":"预计耗时：2~3个月 介绍 MIT 6.0001 2016年春版本：https://www.bilibili.com/video/av18859810?from=search&seid=14941201964410549319 2010年版本：http://open.163.com/special/opencourse/bianchengdaolun.html 我只看过早期版本的，2016版扫了一下，内容似乎差不太多，主要是把 Python2 升级到了 Python3 。不过它们之间差别不大，有兴趣可以到 Python 官网 python.org 了解一下。 你可以在官网找到作业：https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/ 不过作业不是强制性的。最终你只需要完成下面这个大作业即可。 但是不要忘了，编程重在实践。如何自己实现排序；怎么用动态规划求解Fibonacci数列；怎么用 Newton 法解方程；这些最好都能够自己动手实践一遍，有代码量的积累之后，做起大作业会比较轻松。 初学者入门可能会纠结于怎么配环境的问题，相关问题如果没办法搜索引擎解决，可以直接问高年级的同学，节约时间。 本节大作业：随机漫步问题 随机漫步是一个统计学上的经典问题。一个醉汉从原点出发，他每秒向一个随机方向移动1m，他最后能回到原点吗？ 本作业要求你用 Python 模拟二维空间和三维空间下醉汉在进行随机漫步的情况。使用 matplotlib 将醉汉漫步时间和原点距离的关系可视化。 注意编程时一定要应用 面向对象 的思想去模拟问题。结果不是最关键的，解决问题时体现出来的编程思想才是。 "},"Basic/Harvard-CS50.html":{"url":"Basic/Harvard-CS50.html","title":"了解丰富多彩的技术：哈佛 CS50","keywords":"","body":"预计完成时间：2个月 Harvard CS50 是哈佛大学的计算机入门课程。 它和 MIT 6.0001 有很多交集，这些交集主要在算法方面。但是它介绍了很多计算机网络，数据库，HTML，CSS……相关方面的知识，看它是作为 MIT6.0001的补充。 网易公开课的翻译版本（若干年前的旧版）：http://open.163.com/special/opencourse/cs50.html 如果你英语的听读能力还可以的话，建议在edX上学习或者通过官网：https://cs50.harvard.edu/college/ 不过看这两个课之间不需要有什么先后顺序。看完之后完成一个 PHP + MySQL 的大作业即可。 大作业：投票系统 使用 PHP （原生或使用框架都ok的，在此推荐一下 CodeIgniter）编写一个简单的投票系统。 投票系统使用 MySQL 作为数据库，需要有如下功能： 用户注册和登录的功能 用户每天能进行一次投票 后台可通过对数据库的管理增删投票选项，投票的各项限制均需要可配置。 "},"Basic/Others.html":{"url":"Basic/Others.html","title":"补充","keywords":"","body":"去读 SICP ！ 你知道为什么你写出来的代码一团稀烂当被人跟你说加XX功能的时候你完全不知道怎么加上去吗！？（咦这不是我吗） 你知道你为什么你写了一大堆 if else while for ，别人用几行递归就完成了吗？ 你知道动态语言 Python, Perl 还有很多 DSL 比如 XML，JSON 是怎么被设计出来的吗？ 一切尽在 SICP中，Google it ! "},"Introduction-To-Development/Introduction-To-Development.html":{"url":"Introduction-To-Development/Introduction-To-Development.html","title":"研发入门V0.1","keywords":"","body":"研发入门V0.1 前言 想到即将要看这篇文章的你，我的心情似乎突然复杂起来，好像时间回到了大一刚入门C语言的时候，抱着一本谭浩强的《C语言程序设计》将书中的代码一个个敲到IDE然后编译运行，转眼几年过去了。不过还是要怀着忐忑的心情给你们写(抄&编)一个(可能不那么正确)入门指导。因为不同人的思维方式和接触能力不一样，适合自己的学习入门方法才是最好的。 希望获得的能力 能够学会通过搜索引擎解决问题 有一定的计算机基础，并且能够写一些简单的C语言程序 对计算机系统有一个基础的了解 启蒙 完成Harvard CS50x （哈佛大学：计算机科学这里放B站）。教学语言涉及 C, PHP, JavaScript + SQL, HTML + CSS，内容的广度与深度十分合理，还能够了解到最新的一些科技成果，可以很好激发学习计算机的兴趣。支线任务：阅读《编码》 计算机基础 如果有兴趣可以读一下这本书Computer Systems: A Programmer's Perspective, 3/E《深入理解计算机系统》如果觉得自己的学习进度不够快也可以直接开始学习《C语言程序设计》，学的差不多了再回去看《深入理解计算机系统》，这本书对于理解计算机系统是有很大帮助的。 数据结构与算法 学完了C语言和计算机系统之后，可以学习一下数据结构和算法吧。 推荐一下这个课浙江大学的数据结构，如果能够看完而且做完PAT上的习题，你的编程水平会有一个很大的提升。 其他 学会提问：学习中肯定会遇到问题，应该学会正确的使用搜索引擎。当单靠检索无法解决问题时，去 Stack Overflow或知乎提问，提问前读读这篇文章：能有效解决问题的提问方法。 不要做一匹独狼：尝试在与他人交流想法。尝试搭建一个像这样简单的个人网站。试着在博客上记录自己的想法。收藏自己喜欢的编程类博客。 学好英语：英语是你获取高质量学习资源的主要工具，但在入门阶段，所看的那些翻译书信息损耗也没那么严重，以你自己情况权衡吧。 参考资料 有许多内容是摘自以下资料，(如果你有空)强烈推荐去阅读原文 编程入门指南 v1.5 "}}